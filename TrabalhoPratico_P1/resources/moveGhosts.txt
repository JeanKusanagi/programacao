//Trajetória dos fantasmas
public void ghostPath() {

  //Fantasma vermelho
  translate(red_px+= red_vx, red_py-= red_vy);

  if (red_py==centroY(1)&&red_px==centroX(9)) {
    red_vx=0;
    red_vy=-vel;
  }
  if (red_py==centroY(3)) {
    red_vx=vel;
    red_vy=0;
  }
  if (red_px==centroX(10)) {
    red_vx=0;
    red_vy=-vel;
  }
  if (red_py==centroY(5)) {
    red_vy=0;
    red_vx=vel;
  }
  if (red_px==centroX(11)) {
    red_vx=0;
    red_vy=-vel;
  }
  if (red_py==centroY(6)) {
    red_vx=vel;
    red_vy=0;
  }
  if (red_px==centroX(nCol)) {
    red_vx=0;
    red_vy=vel;
  }
  if (red_py==centroY(1)&&red_px!=centroX(9)) {
    red_vx=-vel;
    red_vy=0;
  }


//Define o array do mapa
public void definePath() {

  for (int j=0; j<=nLin+1; j++) {
    for (int i=0; i<=nCol+1; i++) {
      if (get((int)centroX(i), (int)centroY(j))!=corObstaculos&&wasHere[j][i]==false) path[j][i] = 2;
      if (i==0||j==0||i==nCol+1||j==nLin+1) path[j][i] = 0;
      System.out.printf("%d ", path[j][i]);
    }
    System.out.println();
  }
  System.out.println();
}

//Verifica se pode virar à direita
public boolean turnRight() {
  if (path[positionY(py)][positionX(px)+1]!=0) return true;
  else return false;
}

//Verifica se pode virar à esquerda
public boolean turnLeft() {
  if (path[positionY(py)][positionX(px)]!=0) return true;
  else return false;
}

//Verifica se pode virar para baixo
public boolean turnDown() {
  if (path[positionY(py)+1][positionX(px)]!=0) return true;
  else return false;
}

//Verifica se pode virar para cima
public boolean turnUp() {
  if (path[positionY(py)][positionX(px)]!=0) return true;
  else return false;
}

//Deteta colisao
public void detectWall() {
  if (!turnRight()&&direction=="right") vx=0;
  if (!turnLeft()&&direction=="left") vx=0;
  if (!turnDown()&&direction=="down") vy=0;
  if (!turnUp()&&direction=="up") vy=0;
}
